<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:redis="http://www.springframework.org/schema/redis"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/redis
        http://www.springframework.org/schema/redis/spring-redis.xsd"
>


    
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。 -->
        <property name="maxTotal" value="-1"/>
        <!-- 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例 -->
        <property name="maxIdle" value="5"/>
        <!-- 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException； -->
        <property name="maxWaitMillis" value="5000"/>
        <!-- 指明是否从池中取出连接前进行检验，如果检验失败，则从池中去除连接并尝试取出另外一个 -->
        <property name="testOnBorrow" value="true"/>
    </bean>

    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="127.0.0.1"></property>
        <property name="port" value="6379"></property>
        <property name="usePool" value="true"></property>
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <property name="database" value="8"/>
        <constructor-arg index="0" ref="jedisPoolConfig"/>
    </bean>

        <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
            <property name="connectionFactory" ref="redisConnectionFactory"></property>
        </bean>

    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"></property>
    </bean>


    <bean id="listener" class="Redis.TestListener"></bean>
    <bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="jdkSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />

    <redis:listener-container>
        <redis:listener ref="listener" method="handleMessage" topic="test" serializer="jdkSerializer"></redis:listener>
    </redis:listener-container>

</beans>